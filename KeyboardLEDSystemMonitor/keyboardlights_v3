#!/usr/bin/env ruby
#Frozen_String_Literal: true
$-v = nil

abort "#{RUBY_ENGINE.capitalize} #{RUBY_VERSION} is not supported! Please use Ruby 2.5+" if RUBY_VERSION.split(?.).first(2).join.to_i < 24
abort "This program is written only for Linux!" unless /linux/ === RUBY_PLATFORM

Kernel.class_exec { define_method(:then) { | &b | b === self } } unless Kernel.respond_to?(:then)

def find_index_of_net_bytes
	index_of_bytes ||= nil

	unless index_of_bytes
		data = IO.foreach('/proc/net/dev')

		r, h = data.next.split, {}

		r.each_with_index { |x, i|
			downcased = x.downcase
			h.merge!(:r => i) if downcased.start_with?('receive'.freeze)
			h.merge!(:t => i) if downcased.start_with?('transmit'.freeze)
		}

		data_0 = data.next.gsub(?|.freeze, ' %'.freeze)
		index_of_bytes = []
		data_0.split.each_with_index { |x, i| index_of_bytes << i if x == '%bytes'.freeze }
		h[:r] > h[:t] ? index_of_bytes.reverse : index_of_bytes
	else
		index_of_bytes
	end
end

def main(clear: false, refresh:)
	transmit, receive = find_index_of_net_bytes

	get_internet_usage = proc {
		_v = 0
		IO.readlines('/proc/net/dev').drop(2).each { |x|
			splitted = x.split(' ')
			next if splitted[0].start_with?('lo:')
			_v += splitted[transmit].to_i + splitted[receive].to_i
		}

		_v
	}

	get_disk_status = proc { |partition| IO.foreach('/proc/diskstats').find { |x| x.split[2] == partition } &.split.to_a[11] }

	refresh /= 1000.0

	get_cpu_usage = proc do |ref|
		prev_user, prev_nice, prev_sys, prev_idle, prev_iowait, prev_irq, prev_softirq, prev_steal = IO.foreach('/proc/stat').first.split[1..8].map(&:to_i)
		Kernel.sleep(ref)
		user, nice, sys, idle, iowait, irq, softirq, steal = IO.foreach('/proc/stat').first.split[1..8].map(&:to_i)

		previdle, idle = prev_idle + prev_iowait, idle + iowait
		totald = idle + (user + nice + sys + irq + softirq + steal) - previdle.+(prev_user + prev_nice + prev_sys + prev_irq + prev_softirq + prev_steal)
		totald.to_f.-(idle - previdle)./(totald).*(100)
	end

	n = Dir['/sys/class/leds/input[0-9]*::numlock/brightness']
	c = Dir['/sys/class/leds/input[0-9]*::capslock/brightness']
	s = Dir['/sys/class/leds/input[0-9]*::scrolllock/brightness']

	fail Errno::EACCES unless [n, c, s].all? { |x| x.all? { |y| File.owned?(y) } }

	root_partition = IO.foreach('/proc/mounts').detect { |x| x.split[1] == ?/ }.to_s.split[0].to_s.split(?/).to_a[-1]

	cpu_thread = Thread.new { }
	net_thread = Thread.new { }
	disk_thread = Thread.new { }
	blink_thread = Thread.new { }

	if clear
		n.each { |x| IO.write(x, 0) unless IO.read(x, 1) == ?0 }
		c.each { |x| IO.write(x, 0) unless IO.read(x, 1) == ?0 }
		s.each { |x| IO.write(x, 0) unless IO.read(x, 1) == ?0 }
		return nil
	end

	puts "\e[38;5;33mStarted Monitoring CPU Usage [ \e[38;5;70mNumlock\e[38;5;33m ] Disk IO [ \e[38;5;70mCaps Lock\e[38;5;33m ] Net Usage [ \e[38;5;70mScroll Lock\e[38;5;33m ]\e[0m"
	puts "\e[38;5;196mRefreshing every #{refresh * 1000} millisecond#{ refresh * 1000 != 1 ? ?s : '' }\e[0m"

	blink_caps = proc { |blink_interval|
		s.each { |x| IO.write(x, 1) unless IO.read(x, 1) == ?1 } rescue nil
		sleep(blink_interval)
		s.each { |x| IO.write(x, 0) unless IO.read(x, 1) == ?0 } rescue nil
		sleep(blink_interval)
	}

	cpu_usage = 0
	internet_usage = 0
	threads = []

	begin
		threads << Thread.new {
			while true
				if internet_usage > 4_194_304
					blink_caps.(0.0125)
				elsif internet_usage > 2_097_152
					blink_caps.(0.05)
				elsif internet_usage > 1_048_576
					blink_caps.(0.125)
				elsif internet_usage > 524_288
					blink_caps.(0.25)
				elsif internet_usage > 32_768
					blink_caps.(0.5)
				else
					s.each { |x| IO.write(x, 0) unless IO.read(x, 0) == ?0 } rescue nil
					sleep(refresh)
				end
			end
		}

		threads << Thread.new {
			while true
				if cpu_usage > 75
					n.each { |x| IO.write(x, 1) unless IO.read(x, 1) == ?1 } rescue nil
				else
					n.each { |x| IO.write(x, 0) unless IO.read(x, 1) == ?0 } rescue nil
				end

				sleep(refresh)
			end
		}

		threads << Thread.new {
			cpu_usage = get_cpu_usage.(refresh) while true
		}

		threads << Thread.new {
			while true
				prev_call = get_internet_usage.call
				sleep(refresh)
				current_call = get_internet_usage.call

				diff = current_call - prev_call
				internet_usage = diff.fdiv(refresh)
			end
		}

		threads << Thread.new {
			while true
				if get_disk_status.(root_partition) == ?0
					c.each { |x| IO.write(x, 0) unless IO.read(x, 1) == ?0 } rescue nil
				else
					c.each { |x| IO.write(x, 1) unless IO.read(x, 1) == ?1 } rescue nil
				end

				sleep(refresh)
			end
		}

		while true
			n = Dir['/sys/class/leds/input[0-9]*::numlock/brightness']
			c = Dir['/sys/class/leds/input[0-9]*::capslock/brightness']
			s = Dir['/sys/class/leds/input[0-9]*::scrolllock/brightness']

			sleep(3)
		end
	rescue Errno::ENOENT
		threads.each(&:kill)
		threads.clear

		retry
	rescue StandardError
		puts $!.full_message

		threads.each(&:kill)
		threads.clear

		sleep refresh
		retry
	end

	nil
end

args = ARGV.join(?=).split(?-).reject(&:empty?)
query = proc { |a, d = 0| args.find { |x| x[a] }.to_s.split(?=)[-1].then { |x| x ? x : d } }

if ARGV.any? { |x| x[/(^\-\-help+$)|(^\-h+$)/] }
	puts <<~EOF
		\e[38;5;196m#{Process.argv0} Lets you monitor your system CPU, Swap and IO through keyboard lights.

		\e[38;5;200mLights:
			\e[0;32mNum Lock LED => On when the CPU Usage > 75%
			\e[0;32mCaps Lock LED => On when the Disk mounted as / is Busy
			\e[0;32mScroll Lock LED => Blinks (various mode) when Internet is in Use

		\e[38;5;200m#{Process.argv0} Arguments:
			\e[38;5;190m1.#{Process.argv0} --help                   This help section
			2.#{Process.argv0} --refresh=n/ -r=n        Refresh time specified in milliseconds.
                                                                  [Default: 80]
		\e[38;5;200m#{Process.argv0} Arguments Example:
			\e[38;5;12m#{Process.argv0} --refresh=1000
			#{Process.argv0} --refresh 1000\e[0m
	EOF

	exit 0
end

refresh = query.(/(^r\=[0-9\.]*=?+$)|(^refresh\=[0-9\.]*=?+$)/, 75).to_f.then { |x| x < 1 ? 1 : x }

begin
	main(refresh: refresh)
rescue Interrupt, SignalException, SystemExit
	puts "\n\e[38;5;45mBye!\e[0m"
rescue Errno::EACCES
	puts "\n\e[1;31mPermission Denied. Try Running #{$0} as Root.\e[0m" unless system('notify-send', ":: #{$0}: Permission Denied. Try Running #{$0} as Root.")
rescue Exception
	puts $!
ensure
	main(clear: true, refresh: 0) rescue nil
end
