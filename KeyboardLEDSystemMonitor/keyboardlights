#!/usr/bin/env ruby
#Frozen_String_Literal: true
$-v = nil

GC.start(full_mark: true, immediate_sweep: true)

def get_cpu_usage
	data = IO.foreach('/proc/stat').first.split.map!(&:to_f)
	Kernel.sleep(0.05)
	prev_data = IO.foreach('/proc/stat').first.split.map!(&:to_f)

	%w(user nice sys idle iowait irq softirq steal).each_with_index { |el, ind| binding.eval("@#{el}, @prev_#{el} = #{data[ind + 1]}, #{prev_data[ind + 1]}") }

	previdle, idle = @prev_idle + @prev_iowait, @idle + @iowait
	totald = idle + (@user + @nice + @sys + @irq + @softirq + @steal) - previdle.+(@prev_user + @prev_nice + @prev_sys + @prev_irq + @prev_softirq + @prev_steal)

	totald.-(idle - previdle)./(totald).*(100).abs.round(2)
end

def get_swap_usage() IO.readlines('/proc/swaps').drop(1).map!(&:split).map { |x| x[3].to_i }.sum.fdiv(1024).round(2) end
def get_disk_status(partition) IO.readlines('/proc/diskstats').map(&:split).find { |x| x[2] == partition }.to_a[11].to_i > 0 end

def main(clear: false)
	n, cp = Dir['/sys/class/leds/input[0-9]*::numlock/brightness'].tap(&:sort!), File.readable?('/proc/cpuinfo')
	c, sw = Dir['/sys/class/leds/input[0-9]*::capslock/brightness'].tap(&:sort!), File.readable?('/proc/swaps')
	s, st = Dir['/sys/class/leds/input[0-9]*::scrolllock/brightness'].tap(&:sort!), File.readable?('/proc/stat') && File.readable?('/proc/mounts')

	fail Errno::EACCES unless [n, c, s].all? { |x| x.all? { |y| File.owned?(y) } }

	puts "\e[1;31mUnreadable /proc/cpuinfo\e[0m" unless cp
	puts "\e[1;31mUnreadable /proc/swaps\e[0m" unless sw
	puts "\e[1;31mUnreadable /proc/stat or /proc/mounts.\e[0m" unless st

	root_partition = st ? IO.foreach('/proc/mounts').find { |x| x.split[1] == ?/ }.to_s.split[0].to_s.split(?/)[-1] : ''

	if (cp || sw || st)
		unless clear
			puts ((
				"\e[38;5;33mStarted Monitoring #{"CPU Usage [ \e[38;5;70mNumlock\e[38;5;33m ], " if cp}" +
				"#{"Swap Usage [ \e[38;5;70mCaps Lock\e[38;5;33m ], " if sw}#{"Disk IO [ \e[38;5;70mScroll Lock\e[38;5;33m ]\e[0m" if st}"
			).delete_suffix(', '))

			while true
				cp && get_cpu_usage > 75 ? n.each { |x| IO.write(x, 1) unless IO.read(x).to_i == 1 } : n.each { |x| IO.write(x, 0) unless IO.read(x).to_i == 0 }
				sw && get_swap_usage > 0 ? c.each { |x| IO.write(x, 1) unless IO.read(x).to_i == 1 } : c.each { |x| IO.write(x, 0) unless IO.read(x).to_i == 0 }
				st && get_disk_status(root_partition) ? s.each { |x| IO.write(x, 1) unless IO.read(x).to_i == 1 } : s.each { |x| IO.write(x, 0) unless IO.read(x).to_i == 0 }
			end
		else
			n.each { |x| IO.write(x, 0) unless IO.read(x).to_i.zero? } if cp
			c.each { |x| IO.write(x, 0) unless IO.read(x).to_i.zero? } if sw
			s.each { |x| IO.write(x, 0) unless IO.read(x).to_i.zero? } if st
		end
	end
	nil
end

begin
	main
rescue Interrupt, SignalException, SystemExit
	puts "\n\e[38;5;45mBye!\e[0m"
rescue Errno::EACCES
	puts "\n\e[1;31mPermission Denied. Try Running #{$0} as Root.\e[0m"
rescue Exception
	puts $!
ensure
	main(clear: true) rescue nil
end
